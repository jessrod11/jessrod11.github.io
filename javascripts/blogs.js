console.log("Stix");
var blogs = [
    {
        id: "blog1",
        title: "Week Two: Command Line, Git, and Github!",
        date: "02/27/2018",
        post: "The Command Line: This week we focused on the command line and git! While I felt pretty comfortable with both topics from my practice in E6, I found the refresher helpful.I’ve always been able to follow the steps to properly create a repository, push code to Github, and pull down to master.I never took the time to focus on what the command line and git are, how they came into existence, and why they are important.With the new lecture format, I was able to learn those things and appreciate the process even more. I hear often that developers are intimidated by the command line and git when they are first introduced to it. That was not my experience.I am a lover of words and quotes and when Zoe first taught us the Mac command to get into to terminal, I knew I would love it.“Command Space.” Would you believe me if I told you that it became tattoo inspiration for me ? Lol Random right ? !It spoke volumes to me.From that day forward, I fell in love with it.Learning the commands, instantly made me feel like a top notch developer.Insert the funniest ROFL gif you can find!It’s true though.I picked up the commands fairly easily and didn’t have a problem  Pwd: Print Work Directory - In a nutshell, it prints where you are on your machine. Mkdir: Make Directory - This command is how you create a directory Cd: Change directory - This command is how you navigate into different directories. Cd..: This command is used to go UP one directory level or in my mind is how you back out of the directory you are currently in.  Cd~: This command is a new one for me.We were told that it is how you go back to the root of your machine. touch: You use this command to create your html,  Ls: list directory - This command is used to list the files that are in the directory you are in at the time of the command. Mv: Move - This command is used to move a directory or file to another location.This command is also cool because you can use it to rename a file or directory as well. There are so many more commands.I could literally go on and on. Git and Github Git and Github were just as easy for me to learn as it follows the same concept.Git is used to track changes made to my code and Github stores that code.Github is also used for team  collaboration.Like the command line, git has commands that are used to add, save, and push to Github.To put it plainly, these two are basically how we grab code from the terminal to house on Github and locally if needed.It’s pretty cool, in my opinion.We create the repository in Github, and from there, steps are provided to help you track your code in the terminal.Some of the commands are as follows: Git init: This command starts your git history according to our lecture.To me, it sounds exactly like it’s command.Get in it, get to it, get started ? !Make sense ? Lol Git status: This is a color coded command and helps you see your changes as they are made.Red stands for modified code / code that needs to be added.Green stands for code that has been added or saved.Git branch: shows you what branch you are currently on.It’s another that I rely on often when pushing my code.I forget the name of my branch all of the time.Git add: This command allows you to choose the file you want to add or save.It prepares you for your commit.Git commit / Git commit - m: Takes your saved changes and saves them to your git history.The - m flag allows you type a message of what changed you made and are printed in your github repository once it is pushed.Git push: This command, in a nutshell, pushes your saved code to Github.Git pull: This command pulls your code into the directory your name.Again, there are many more commands.These are ones that we use often! As you can see, I loved this lecture.It makes sense to me and is very helpful in my coding journey.Until next time, dueces!"
    },
    {
        id: "blog2",
        title: "Week Three: Strings, Arrays, Objects",
        date: "03/06/2018",
        post: "This week was all about the basics of Javascript and boy did it start off great! “Really, Stix?! Great?” I mean… Yeah! I  already know the basics of Javascript so my expectation was to sit back and enjoy the refresher… or so I thought. The lecture began with the history of Javascript, which was pretty cool. I remembered reading some of those things in the “You don’t know JS” book, I think… or somewhere online. I didn’t remember learning that Javascript was created in two weeks. I don’t know why, but I found that fact quite interesting. Our lecture then switched over to learning about variables, strings, arrays, objects and how to navigate through them. This included learning about conditional statements, for loops, basic array methods, and advanced array methods. As the lesson went on, I head nodded the instructors as I remembered these things quite well and was super geeked to start writing to the DOM again. The lessons were great and having the slides to reference are still my favorite things about class. It wasn’t until we received our homework assignments that I started to fight the tears in the shower. Here’s what a brief recap of what I know no Strings are housed inside of quotations and can be named in variables, in objects, and can be concatenated together to form sentences in the Dom or declared with pieces of code. I can show you better than I am describing it in this blog… I promise. Some properties that we learned in class are: string.length- this tells us how many characters are in the string. string.replace- this can be used to replace part of a string. We learned how to properly use regular expressions to replace items in a string. Zoe also gave us a pretty cool website to use to help us better understand the regular expression method. I found this information quite useful. The website is called rubular.com and is quite helpful to test and edit your regular expressions. string.indexOf - this property returns the index within the string being called. We also completed challenges in class to help us better understand strings and how to use the properties!  Arrays, as stated in our lecture notes is like a bucket you can house anything in such as strings, numbers and booleans. We learned how to write them, how to write objects inside of them and how to target a specific element inside of it. We also learned both basic and advanced arrays that help us navigate within, remove things from them, and do all kinds of complex/cry in the shower type of stuff… Yeah, I thought it was a little early for me to be crying in the shower too. Ok, I confess. I haven’t cried yet. There has definitely been puzzled looks in the mirror there. I’d say that’s pretty close.  Basic Array Methods : The POP method removes from the end of the array.  The PUSH method adds to the end of the array.  The SHIFT method removes from the front of The UNSHIFT method adds to the front of the array  The for loop was introduced next and is one of my favorite ways of obtaining . By this point in the week, I was still pretty confident with what I knew and was eager to help anyone where needed. The homework was definitely my first scary moment! The Array Challenges were just that… CHALLENGING! I thought I knew when to  use array methods and how to sift through them to capture the information I need. Naw… as soon as I read that first scenario, I looked away from my machine. I didn’t want that fear to keep me from coding, so I just went for it… With the help of my group mates, I was able to work through what I knew to print what I needed.  It was tough, and it’s still tough, but I’m not going to let it keep me from the very thing I dream about most… learning and conquering code! We talked about functions and  advanced array methods as well. While all of the advanced array methods went over my head, thanks to You Don’t Know JS, and  other online resources, with time, they, too, will make more sense. Overall, I am still so grateful for this second chance to prove myself and grow in this field! Until next time, deuces!"
    },
    {
        id: "blog3",
        title: "Week Four: JS Advanced Array Methods and Git Teams",
        date: "03/13/2018",
        post: "Remember how I talked about Advanced Array Methods last week? Well apparently I talked about them a little early because I’m to mention them in this blog. I mean… if I’m being honest, I don’t wannnnnnna, lol, but there are things that I’ve learned and I know that these will be my best friends if I just give them a chance. So here we go! Advanced Array Methods. *wipes away tear from right eye* lol I’m dramatic, sorry. Our pretty awesome instructors knew, based on others messages in Slack, that the array, object, and functions homework was kind of getting the best of us, so they can up with the brilliant idea od working through some of them in class as a group. First, a group would present their best outcome to the challenge provided by the instructor and then Lauren came up and worked the same challenge with the new array method. I liked the idea and totally see where they hoped to go with the lecture. Honestly, I think it worked. It’s one thing to read about or watch the instructor code with the new methods. It’s even better when we get to apply what we know and see how these new methods can help make the code easier, hopefully, to work through. The .includes() method made a lot of sense to me. It’s the method that determines if an array includes an element and returns true or false where appropriate. The .forEach() method is a lot like a for loop in that it executes a provided function once for each element. Ok, I kind of took that from the lecture, but they worded it better. It’s basically like a for loop. Trust me.  There were others like the .map() method, the .sort() method, and .filter() method, and for the sake of being honest, I’ll just admit that I’m not quite sure how they work and am grateful for resource guides like MDN, Moxilla Developer Network, that has more detailed information about each method. It will tell you if it requires a function and what arguments/parameters can and/or need to be passed through them. It’s pretty legit. It’s definitely the first link I click on my google adventures. We also learned how to function in Github as a team. Our instructors worked as a team to create or plan the process for a dating site for plastic dinosaurs. Yeah. Don’t ask! Lol They came up with some pretty dope ideas that went with the theme though. Lol The process included white boarding the file structure, data and functions that would be used to create the app. They then created a mockup from the moqup website that I’ve found helpful from my first time learning about it. Then they moved on to the Projects area of the repository they created. We learned how to make the column cards to show what process each ticket is in. Those cards are called: TO DO, IN PROGRESS, and COMPLETE. The tickets/notes were created next which gave a brief description of what needs to be done in the card. For example, if a SETUP ticket was created, the note would include brief information on how to setup the project. Once saved, it can then be converted to an issue which has more detailed information about the ticket. We were given a structure to follow to keep our tickets as professional and detailed as possible. The structure includes a STORY that gives a brief statement of what the developer or user needs to see as a result of the card. The ACCEPTANCE CRITERIA lists the WHEN THEN and AND of it all, again more detailed information about the ticket. The TECHNICAL NOTES, usually lists the file structure needed and the name of the functions, variables ids, or classes if any are needed. I was really grateful for the latter part of the week. I was back in refresher mode and able to relax through a lesson. Anyway, that’s all I have! Until next time, deuces! "
    },
    {
        id: "blog4",
        title: "Week Six: ES6, DOM Interaction, and Markdown",
        date: "03/27/2018",
        post: "This week we were introduced or in my case reintroduced to ES6, Dom Interaction, and Markdown. I’ll say the hardest part about starting over is attempting assignments without ES6. I’ve been working on code since I left Cohort 6 an found it hard to write code without fat arrows and template literals. I was ecstatic to have ES6 back in my life officially. Lol I won’t lie. I added template literals in our group project so my teammates were hip to it before it was taught. Sorry about that, Zoe! Event listeners were always cool to me and is actually when I went from seeing Javascript as a super scary language, to a cool one. I like being able to add  functionality to my page.  We were given an assignment to create a language translate before the class learned about event listeners. Technically, we knew about it thanks to Treehouse, the Mark Myers books, and my last experience with my cohort. I thought it was a bit messed up that they had them/us attempt it anyway though. Lol They owned up to it though, which is why I love the instructors. Because they felt bad, we were able to do a simplified version of it in class when we had the official lesson on Dom interaction. With that, I believe people were able to go back and tweak their code to get their event listeners working. It definitely helped me. I still struggle with logic a bit, so I will admit that the assignment is not 100% finished on my end. I’m about 80% there, which is pretty dope considering my first time around, I could barely write code on my own at this point. I still have a long ways to go, but I’m much more confident in my ability to get through it this time! Markdown is probably the easiest thing that we’ve learned so far. Lol I like the way it was tough this time around. There was more direction and structure which I believe will make for cooler readme’s moving forward. I love that I know how to add screenshots to them now. I was also still pretty partial to the sublime text editor that I was introduced to in the last cohort. I think the Markdown feature in VS Code has now made me a believer. I think it’s so cool that I can write my markdown and on my split screen see the updates in realtime! “Ok, VS Code… I believe you’ve got me now!!!” Until next time, deuces!"
    }
];

function createBlogPosts(blogArray) {
    for (var i = 0; i < blogArray.length; i++) {
        var blogString = '';
        blogString += '<div class="blog-styles">';
        blogString += '<h2>' + blogArray[i].title + '</h2>';
        blogString += '<h2>' + blogArray[i].date + '</h2>';
        blogString += '<p>' + blogArray[i].post + '</p>';
        blogString += '</div>';
        writeToDom(blogString, 'blog-container');
    }
};

function writeToDom(stringToPrint, divId) {
    var blogDiv = document.getElementById(divId);
    blogDiv.innerHTML += stringToPrint;
};

createBlogPosts(blogs);